Spring Annotations & Interview FAQS :

-------------------------------------------------------------------------------------


@Configuration  : 	A class is annotated with @Configuration to declare these class as a java config class
					where each method creates a bean which is managed by the spring IOC Container .
				 
					Indicates that a class declares one or more @Bean methods and may be processed by the Spring container to generate bean definitions and service requests for those beans at runtime,
	
-------------------------------------------------------------------------------------				
				
@Bean           : 	Annotated used on the method in the configuration class to makes the bean as a dependency object managed by spring Ioc container 

					Indicates that a method produces a bean to be managed by the Spring container.
					
									 

-------------------------------------------------------------------------------------

@Component   	:	A class level annotation used to mark the class as a bean ,which is going to manage by the spring
 
					Indicates that the annotated class is a component.
					Such classes are considered as candidates for auto-detection when using annotation-based configuration and classpath scanning
					
					
-------------------------------------------------------------------------------------

@ComponentScan("com.example") :  A class level annotation to scan the packages and sub packages for bean defination/ components

								Configures component scanning directives for use with @Configuration classes.
                                Provides support comparable to Spring's <context:component-scan> XML namespace element.
								
-------------------------------------------------------------------------------------

@Autowired 					: Autowring the dependency (injecting the target object into source object by @Autowired annotation )
							 ways of using @Autowired annotation
							 1.constructor based
							 2.setter based 
							 3. field based.
							 
							 Marks a constructor, field, setter method, or config method as to be autowired by Spring's dependency injection facilities. This is an alternative to the JSR-330 Inject annotation, adding required-vs-optional semantics
							 								
-------------------------------------------------------------------------------------

@Primary       :		if there are  multiple implementations of an interface , in order to avoid conflict which one to pass as dependency @ primary used for default bean pass

								
-------------------------------------------------------------------------------------

@ Qualifier 	:	  Qualifier annotation is used to resolve the conflict when there are multiple implementations of same type 
						
						This annotation may be used on a field or parameter as a qualifier for candidate beans when autowiring. It may also be used to annotate other custom annotations that can then in turn be used as qualifiers.
						
-------------------------------------------------------------------------------------